from curses.ascii import isdigit

from aiogram import Router, types, F
from aiogram.filters import Command, or_f
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.media_group import MediaGroupBuilder
from datetime import datetime, date
from buttons.buttons_user import confirm_kb, start_post, post_kb, otpravit_post, da_net_kb, referalka, work_chanel, zhaloba_kbds
from sqlalchemy.ext.asyncio import AsyncSession
from buttons.html import convert_to_html
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import os
from buttons.calendar import calendar_month, calendar_day, calendar_time
from database.orm import orm_add_post_with_media, orm_update_status, orm_get_posts_with_media_details_by_status, \
    orm_get_post_with_media_details_by_id, orm_delete_post, orm_update_status_by_id, orm_update_text_post_by_id, orm_get_zhaloba
from database.engine import session_maker
from config import ADMIN_IDS, CHANNEL_IDS

post_router = Router()

load_dotenv()
TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))


class PostStates(StatesGroup):
    text = State()
    media = State()
    month = State()
    day = State()
    time = State()
    date = State()
    check_post = State()
    status = State()
    confirm = State()


@post_router.message(Command('start'))
async def start(message: types.Message):
    if message.from_user.id in [ADMIN_IDS["MAIN_ADMIN"], ADMIN_IDS["SECOND_ADMIN"]]:
        await message.answer('–î–∞—Ä–æ–≤–∞, —Ç—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=await start_post(message))

@post_router.message(F.text=='–†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–æ–º')
async def ref_admin(message: types.Message):
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup= work_chanel)


@post_router.message(F.text=='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–ª–æ–±—ã')
async def ref_admin(message: types.Message, session: AsyncSession):
    zhaloby = await orm_get_zhaloba(session)
    await message.answer('–í–æ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –∂–∞–ª–æ–±—ã:', reply_markup= work_chanel)
    for i in zhaloby:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i.kto_otpravil} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É –Ω–∞ {i.na_kogo_otpravili}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∂–∞–ª–æ–±—É - {i.text}', parse_mode=ParseMode.HTML, reply_markup = await zhaloba_kbds(session, i.id))



@post_router.message(F.text == '–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç')
async def start_add_post(message: types.Message, state: FSMContext):
    msg = (f'–§–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:\n'
           f'%%–ñ–ò–†–ù–´–ô%%\n'
           f'^^–ö–£–†–°–ò–í^^\n'
           f';;–ó–ê–ß–ï–†–ö–ù–£–¢–´–ô;;\n'
           f'!!–ú–û–ù–û–®–ò–†–ò–ù–ù–´–ô!!\n'
           f'&&–¶–ò–¢–ê–¢–ê&&\n'
           f'‚Ññ‚Ññ–°–°–´–õ–ö–ê‚Ññ –¢–ï–ö–°–¢ ‚Ññ‚Ññ\n'
           f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:')
    await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    await state.set_state(PostStates.text)


@post_router.message(PostStates.text, F.text)
async def get_post_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ). –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /done.")
    await state.set_state(PostStates.media)


count = 0


@post_router.message(PostStates.media, or_f(F.photo, F.video))
async def get_post_media(message: types.Message, state: FSMContext):
    media_type = "photo" if message.photo else "video"
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id

    data = await state.get_data()
    media_files = data.get("media", [])
    global count
    if count < 10:
        media_files.append({"file_id": file_id, "type": media_type})
        count += 1
        await state.update_data(media=media_files)
        await message.answer(
            f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω.\n–ú–∞–∫—Å–∏–º—É–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ - 10.\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ - {count}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /done.")
    else:
        await message.answer(
            '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤, –¥–∞–ª—å–Ω–µ–π—à–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n–ù–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')


# calendar
@post_router.callback_query(F.data == 'year')
async def calendaric_year(callback: CallbackQuery):
    current_year = str(datetime.now().year)
    await callback.answer(f'–¢–µ–∫—É—â–∏–π –≥–æ–¥-{current_year}')


@post_router.callback_query(F.data == 'weekday')
@post_router.callback_query(F.data == 'month')
async def calendaric_month(callback: CallbackQuery, state: FSMContext):
    meet = await state.get_data()
    month = meet['month']
    await callback.answer(f'–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü-{month}')


@post_router.message(Command("done"))
async def make_meet(message: types.Message, state: FSMContext):
    res = await state.get_data()
    if len(res) == 1:
        await message.answer('–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ! –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ')
        await state.set_state(PostStates.media)
    else:
        global count
        count = 0
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü', reply_markup=await calendar_month())
        await state.set_state(PostStates.month)


@post_router.callback_query(PostStates.month)
async def calendaric_month(callback: CallbackQuery, state: FSMContext):
    month = callback.data
    await state.update_data(month=month)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=await calendar_day(month))
    await state.set_state(PostStates.day)


@post_router.callback_query(PostStates.day)
async def calendaric_day(callback: CallbackQuery, state: FSMContext):
    day = callback.data
    if day == '–Ω–∞–∑–∞–¥':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü', reply_markup=await calendar_month())
        await state.set_state(PostStates.month)
    else:
        await state.update_data(day=day)
        meet = await state.get_data()
        month = meet['month']
        day = meet['day']
        if int(day) < 10:
            day = '0' + day
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        month = str(months.index(month) + 1)
        if int(month) < 10:
            month = '0' + month
        date = day + '.' + month
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è', reply_markup=await calendar_time(date))
        await state.set_state(PostStates.time)


@post_router.callback_query(PostStates.time)
async def select_name(callback: CallbackQuery, state: FSMContext):
    time = callback.data
    await state.update_data(time=time)
    meet = await state.get_data()
    month = meet['month']
    day = meet['day']
    time = meet['time']
    if time == '–Ω–∞–∑–∞–¥':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=await calendar_day(month))
        await state.set_state(PostStates.day)
    else:
        await callback.message.delete()
        if int(day) < 10:
            day = '0' + day
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        month = str(months.index(month) + 1)
        if int(month) < 10:
            month = '0' + month
        date = str(datetime.now().year) + '-' + month + '-' + day
        await state.update_data(date=date)
        await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –ø–æ—Å—Ç!')
        # post
        data = await state.get_data()
        text = data["text"]
        media_files = data.get("media", [])

        text = convert_to_html(text)
        text += '\n' + '\nüíª' + '<a href="https://t.me/chinaki_news">CHINAKI</a>'
        await state.update_data(text=text)
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ InputMedia –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        photos = MediaGroupBuilder(
            caption=text
        )
        for file in media_files:
            if file['type'] == 'photo':
                photos.add_photo(file['file_id'])  # –ü–µ—Ä–µ–¥–∞–µ–º file_id —á–µ—Ä–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            elif file['type'] == 'video':
                photos.add_video(file['file_id'])  # –ü–µ—Ä–µ–¥–∞–µ–º file_id —á–µ—Ä–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç

        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        await callback.message.answer_media_group(media=photos.build())  # –í—Å–µ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await callback.message.answer(f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–ª–æ–∂–µ–Ω –≤ {data['time']} {data['date']} —á–∏—Å–ª–∞, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?",
                                      reply_markup=confirm_kb)
        await state.set_state(PostStates.confirm)


@post_router.message(PostStates.confirm, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå")
async def cancel_post(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await start_post(message))
    await state.clear()


@post_router.message(PostStates.confirm, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ")
async def send_post(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(status='–ñ–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    res = await state.get_data()
    res['date'] = datetime.strptime(res['date'], "%Y-%m-%d").date()
    await orm_add_post_with_media(
        session=session,
        text=res['text'],  # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        media_files=res['media'],  # –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        publish_time=res['time'],  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publish_date=res['date'],  # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        status=res['status']  # –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
    )
    await orm_update_status(session, '–ñ–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!', reply_markup=await start_post(message))
    await state.clear()


async def yvedomlenie(bot: Bot):
    await bot.send_message(ADMIN_IDS["MAIN_ADMIN"], '–ù–æ–≤—ã–π –ø–æ—Å—Ç –∂–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏!')


@post_router.message(F.text == '–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã')
async def see_posts(message: types.Message, session: AsyncSession):
    posts = await orm_get_posts_with_media_details_by_status(session, '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')
    x = 0
    for i in posts:
        post = i["post"]
        post_id = post.id
        post_text = f'ID –ø–æ—Å—Ç–∞ - {post_id}\n' + f'–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏: {post.publish_date} –≤ {post.publish_time}‚¨áÔ∏è\n\n' + post.text

        photos = MediaGroupBuilder(
            caption=post_text
        )

        media_details = i["media_details"]
        for media in media_details:
            file_id = media["file_id"]
            media_type = media["media_type"]

            if media_type == 'photo':
                photos.add_photo(file_id)
            if media_type == 'video':
                photos.add_video(file_id)

        await message.answer_media_group(media=photos.build())
        x += 1
    if x == 0:
        await message.answer('–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç(')


class AgreePost(StatesGroup):
    check = State()
    confirm = State()
    id = State()
    text = State()
    check2 = State()
    confirm2 = State()


async def get_post_with_media_details_by_id(session: AsyncSession, id: int, post_text=''):
    posts = await orm_get_post_with_media_details_by_id(session, id)
    post = posts['post']
    media_details = posts['media_details']
    if post_text == '':
        photos = MediaGroupBuilder(
            caption=post.text
        )
    else:
        photos = MediaGroupBuilder(
            caption=post_text
        )

    for media in media_details:
        file_id = media["file_id"]
        media_type = media["media_type"]

        if media_type == 'photo':
            photos.add_photo(file_id)
        if media_type == 'video':
            photos.add_video(file_id)

    return photos


@post_router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å/–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç')
async def agree_posts(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ ID –ø–æ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AgreePost.id)


@post_router.message(F.text, AgreePost.id)
async def text_post(message: types.Message, state: FSMContext, session: AsyncSession):
    posts = await orm_get_post_with_media_details_by_id(session, int(message.text))
    if posts:
        post = posts['post']
    if posts == None:
        await message.answer('–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç(', reply_markup=await start_post(message))
    if post.status != '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ':
        await message.answer('–≠—Ç–æ—Ç –ø–æ—Å—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', reply_markup=await start_post(message))
    else:
        if message.text.isdigit():
            await state.update_data(id=int(message.text))
            photos = await get_post_with_media_details_by_id(session, post.id)
            await message.answer_media_group(media=photos.build())
            await message.answer('–ß—Ç–æ –º—ã —Å –Ω–∏–º –¥–µ–ª–∞–µ–º?', reply_markup=post_kb)
            await state.set_state(AgreePost.check)
        else:
            await state.clear()


@post_router.message(F.text, AgreePost.check)
async def post_do(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    postik = await state.get_data()

    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç‚ùå':
        photos = await get_post_with_media_details_by_id(session, postik['id'])
        await orm_delete_post(session, postik['id'])
        await bot.send_media_group(5208369611, media=photos.build())
        await bot.send_message(5208369611, '–≠—Ç–æ—Ç –ø–æ—Å—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!')

        await message.answer('–ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç‚úÖ':
        photos = await get_post_with_media_details_by_id(session, postik['id'])
        await orm_update_status_by_id(session, postik['id'], '–û–¥–æ–±—Ä–µ–Ω–æ')
        await bot.send_media_group(5208369611, media=photos.build())
        await bot.send_message(5208369611, '–≠—Ç–æ—Ç –ø–æ—Å—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!')

        await message.answer('–í—ã –æ–¥–æ–±—Ä–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚öôÔ∏è':
        await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
        await state.set_state(AgreePost.text)

    if message.text == '–°–∞–º–æ–º—É –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç‚öôÔ∏è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç!', reply_markup=ReplyKeyboardRemove())
        await state.set_state(AgreePost.check2)


@post_router.message(F.text, AgreePost.check2)
async def do_myself(message: types.Message, state: FSMContext, session: AsyncSession):
    text = convert_to_html(message.text)
    await state.update_data(text=text)
    res = await state.get_data()
    photos = await get_post_with_media_details_by_id(session, res['id'], text)
    await message.answer_media_group(media=photos.build())
    await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=otpravit_post)
    await state.set_state(AgreePost.confirm2)


@post_router.message(F.text, AgreePost.confirm2)
async def do_myself2(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text == '–î–ê ‚úÖ':
        res = await state.get_data()
        photos = await get_post_with_media_details_by_id(session, res['id'])
        await orm_update_text_post_by_id(session, res['id'], res['text'])
        await orm_update_status_by_id(session, res['id'], '–û–¥–æ–±—Ä–µ–Ω–æ')
        await bot.send_media_group(5208369611, media=photos.build())
        await bot.send_message(5208369611,
                               f'–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏!\n–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ - {res["text"]}')
        await message.answer('–°—É–ø–µ—Ä! –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–ù–µ—Ç ‚ùå':
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç‚öôÔ∏è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
        await state.set_state(AgreePost.check2)


@post_router.message(F.text, AgreePost.text)
async def final_part_post(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(text=message.text)
    res = await state.get_data()
    photos = await get_post_with_media_details_by_id(session, res['id'])
    await message.answer_media_group(media=photos.build())
    await message.answer(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - {res["text"]}', reply_markup=otpravit_post)
    await state.set_state(AgreePost.confirm)


@post_router.message(F.text, AgreePost.confirm)
async def agree_remake_post(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text == '–î–ê ‚úÖ':
        res = await state.get_data()
        photos = await get_post_with_media_details_by_id(session, res['id'])
        await orm_delete_post(session, res['id'])
        await bot.send_media_group(5208369611, media=photos.build())
        await bot.send_message(5208369611,
                               f'–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏!\n–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ - {res["text"]}')
        await message.answer('–°—É–ø–µ—Ä! –ñ–¥–µ–º –æ—Ç–ª–∞–¥–∫–∏!', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–ù–µ—Ç ‚ùå':
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=await start_post(message))
        await state.clear()

    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç‚öôÔ∏è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
        await state.set_state(AgreePost.text)


class Otmena(StatesGroup):
    id = State()
    check = State()


@post_router.message(F.text=='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã')
async def otmena_post(message: types.Message, state: FSMContext, session: AsyncSession):
    posts = await orm_get_posts_with_media_details_by_status(session, '–û–¥–æ–±—Ä–µ–Ω–æ')
    if posts:
        for i in posts:
            post = i["post"]
            post_id = post.id
            post_data = post.publish_date
            post_time = post.publish_time
            photos = MediaGroupBuilder(
                caption= f'ID –ø–æ—Å—Ç–∞ - {post_id}\n–î–∞—Ç–∞ - {post_data}\n–í—Ä–µ–º—è - {post_time}\n' + post.text
            )
            media_details = i["media_details"]
            for media in media_details:
                file_id = media["file_id"]
                media_type = media["media_type"]

                if media_type == 'photo':
                    photos.add_photo(file_id)
                if media_type == 'video':
                    photos.add_video(file_id)
            await message.answer_media_group(media=photos.build())
        await message.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=da_net_kb)
        await state.set_state(Otmena.check)
    else:
        await message.answer('–ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç!', reply_markup=await start_post(message))


@post_router.message(F.text, Otmena.check)
async def da_net(message: types.Message, state: FSMContext):
    if message.text == '–î–ê ‚úÖ':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å!', reply_markup=ReplyKeyboardRemove())
        await state.set_state(Otmena.id)
    if message.text == '–ù–µ—Ç ‚ùå':
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ–Ω—è—é!', reply_markup=await start_post(message))


@post_router.message(F.text, Otmena.id)
async def delete_postik(message: types.Message, session: AsyncSession):
    if isdigit(message.text):
        await orm_delete_post(session, int(message.text))
        await message.answer(f'–ü–æ—Å—Ç —Å ID {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=await start_post(message))
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ', reply_markup=await start_post(message))


async def load_post(bot: Bot):
    async with session_maker() as session:
        posts = await orm_get_posts_with_media_details_by_status(session, '–û–¥–æ–±—Ä–µ–Ω–æ')
        for i in posts:
            post = i["post"]
            if post.publish_date == date.today():
                if post.publish_time < datetime.now().strftime("%H:%M"):
                    post_id = post.id

                    photos = MediaGroupBuilder(
                        caption=post.text
                    )
                    media_details = i["media_details"]
                    for media in media_details:
                        file_id = media["file_id"]
                        media_type = media["media_type"]

                        if media_type == 'photo':
                            photos.add_photo(file_id)
                        if media_type == 'video':
                            photos.add_video(file_id)
                    await bot.send_media_group(CHANNEL_IDS[0], media=photos.build())
                    await orm_delete_post(session, post_id)



